// Generated by CoffeeScript 1.4.0
(function() {

  window.Compound = (function() {

    function Compound(id, label, description, position, size, shape, color) {
      var _ref, _ref1, _ref2, _ref3;
      this.id = id;
      this.label = label;
      this.description = description;
      this.position = position;
      this.size = size;
      this.shape = shape;
      this.color = color;
      _ref = [get_m2c_point(this.position[0]), get_m2c_point(this.position[1])], this.cx = _ref[0], this.cy = _ref[1];
      _ref1 = [get_m2c_point(size[0]), get_m2c_point(size[1])], this.cw = _ref1[0], this.ch = _ref1[1];
      this.virtual = this.id < 0;
      if (this.shape === "square") {
        this.cx1 = this.cx;
        this.cy1 = this.cy;
      }
      _ref2 = [this.size[0], this.size[1]], this.mw = _ref2[0], this.mh = _ref2[1];
      _ref3 = [this.position[0] + this.mw / 2, this.position[1] + this.mh / 2], this.mx = _ref3[0], this.my = _ref3[1];
      this.draw_compound();
    }

    Compound.prototype.draw_compound = function() {
      var shape, text;
      if (this.shape === "circle") {
        shape = new paper.Path.Circle(new paper.Point(this.cx, this.cy), this.width);
        shape.fillColor = this.color[0];
      } else if (this.shape === "square") {
        if (this.virtual) {
          shape = new paper.Path.Rectangle(new paper.Point(this.cx - (this.cw / 2), this.cy - (this.ch / 2) + 1), new paper.Size(this.cw - 1, this.ch));
        } else {
          shape = new paper.Path.Rectangle(new paper.Point(this.cx - (this.cw / 2), this.cy - (this.ch / 2)), new paper.Size(this.cw, this.ch));
        }
        shape.fillColor = this.color[0];
      }
      if (this.virtual) {
        shape.opacity = 0.4;
        return shape.style = {
          strokeColor: 'black',
          fillColor: 'white',
          strokeWidth: 1
        };
      } else {
        if (this.cw === this.ch) {
          text = new paper.PointText(new paper.Point(this.cx - (this.cw / 2) + 22, this.cy - (this.ch / 2) + 15), new paper.Size(this.cw, this.ch));
        } else {
          text = new paper.PointText(new paper.Point(this.cx - (this.cw / 2) + 20, this.cy - (this.ch / 2) + 10), new paper.Size(this.cw, this.ch));
        }
        text.justification = 'center';
        text.fillColor = 'black';
        text.fontSize = '9px';
        return text.content = this.label;
      }
    };

    Compound.prototype._get_base_coords = function(layout, D) {
      var DX, DY, p, p_aux;
      DX = this.mw / 2;
      DY = this.mh / 2;
      switch (layout) {
        case 1:
          p = [this.mx, this.my - (this.mh / 2) - D];
          break;
        case 2:
          p = [this.mx + (this.mw / 2) + D, this.my];
          break;
        case 3:
          p = [this.mx, this.my + (this.mh / 2) + D];
          break;
        case 4:
          p = [this.mx - (this.mw / 2) - D, this.my];
      }
      p_aux = [parseInt(p[0]) - DX, parseInt(p[1] - DY)];
      return p_aux;
    };

    return Compound;

  })();

  window.Reaction = (function() {

    function Reaction(id, label, compound1, compound2, type) {
      this.id = id;
      this.label = label;
      this.compound1 = compound1;
      this.compound2 = compound2;
      this.type = type;
      this.virtual_reactions = [];
      this.paths = [];
    }

    Reaction.prototype.append_virtual_reaction = function(obj) {
      return this.virtual_reactions.push(obj);
    };

    Reaction.prototype.append_path = function(obj) {
      return this.paths.push(obj);
    };

    Reaction.prototype.get_paths = function() {
      return this.paths;
    };

    Reaction.get_coords = function(compound1, compound2, map) {
      var B, BOTTOM, DIRECT_BOTTOM, DIRECT_LEFT, DIRECT_RIGHT, DIRECT_TOP, L1_x, L1_y, L2_x, L2_y, LEFT, RIGHT, TOP, alt_pos, alt_pos1, alt_pos2, alt_x1, alt_x8, alt_y1, alt_y8, approach, cmp1, cmp2, ex, ey, p1_h, p1_w, p1_x, p1_y, p2_h, p2_w, p2_x, p2_y, pos, pos1, pos2, r, reversed, sx, sy, very_long, very_tall, x1, x8, y1, y8, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      B = 1;
      _ref = [B, B * -1, B * 2, B * -2], RIGHT = _ref[0], LEFT = _ref[1], DIRECT_RIGHT = _ref[2], DIRECT_LEFT = _ref[3];
      _ref1 = [3 * B, B * -3, B * 4, B * -4], TOP = _ref1[0], BOTTOM = _ref1[1], DIRECT_TOP = _ref1[2], DIRECT_BOTTOM = _ref1[3];
      _ref2 = [[compound1.position, compound1.size], [compound2.position, compound2.size]], cmp1 = _ref2[0], cmp2 = _ref2[1];
      (_ref3 = cmp1[0], p1_x = _ref3[0], p1_y = _ref3[1]), (_ref4 = cmp1[1], p1_w = _ref4[0], p1_h = _ref4[1]);
      (_ref5 = cmp2[0], p2_x = _ref5[0], p2_y = _ref5[1]), (_ref6 = cmp2[1], p2_w = _ref6[0], p2_h = _ref6[1]);
      reversed = false;
      if (p1_w < p2_w && p1_h < p2_h) {
        _ref7 = [compound2, compound1], compound1 = _ref7[0], compound2 = _ref7[1];
        _ref8 = [[compound1.position, compound1.size], [compound2.position, compound2.size]], cmp1 = _ref8[0], cmp2 = _ref8[1];
        (_ref9 = cmp1[0], p1_x = _ref9[0], p1_y = _ref9[1]), (_ref10 = cmp1[1], p1_w = _ref10[0], p1_h = _ref10[1]);
        (_ref11 = cmp2[0], p2_x = _ref11[0], p2_y = _ref11[1]), (_ref12 = cmp2[1], p2_w = _ref12[0], p2_h = _ref12[1]);
        reversed = true;
      }
      very_tall = p1_h > 10;
      very_long = p1_w > 10;
      L1_y = p1_y - p1_h / 2;
      L2_y = p1_y + p1_h / 2;
      L1_x = p1_x - p1_w / 2;
      L2_x = p1_x + p1_w / 2;
      if (p2_y < L1_y) {
        if (p2_x < L1_x) {
          approach = RIGHT;
          pos = [1, 2];
          alt_pos = [4, 3];
          if (very_tall) {
            approach = LEFT;
            pos = [1, 3];
          }
        } else if ((L1_x < p2_x && p2_x < L2_x)) {
          approach = DIRECT_TOP;
          pos = [1, 3];
        } else if (L2_x < p2_x) {
          approach = RIGHT;
          pos = [1, 4];
          alt_pos = [2, 3];
          if (very_tall) {
            approach = LEFT;
            pos = [1, 3];
          }
        }
      } else if ((L1_y < p2_y && p2_y < L2_y)) {
        if (p2_x < L1_x) {
          approach = DIRECT_RIGHT;
          pos = [4, 2];
        } else if ((L1_x < p2_x && p2_x < L2_x)) {

        } else if (L2_x < p2_x) {
          approach = DIRECT_RIGHT;
          pos = [2, 4];
        }
      } else if (L2_y < p2_y) {
        if (p2_x < L1_x) {
          approach = LEFT;
          pos = [4, 1];
          alt_pos = [3, 2];
          if (very_tall) {
            approach = RIGHT;
            pos = [3, 1];
          }
        } else if ((L1_x < p2_x && p2_x < L2_x)) {
          approach = DIRECT_BOTTOM;
          pos = [3, 1];
        } else if (L2_x < p2_x) {
          approach = LEFT;
          pos = [2, 1];
          alt_pos = [3, 4];
          if (very_tall) {
            pos = [3, 1];
          }
        }
      }
      pos1 = pos[0], pos2 = pos[1];
      _ref13 = compound1._get_base_coords(pos1, 0), sx = _ref13[0], sy = _ref13[1];
      _ref14 = compound1._get_base_coords(pos1, 3), x1 = _ref14[0], y1 = _ref14[1];
      _ref15 = compound2._get_base_coords(pos2, 3), x8 = _ref15[0], y8 = _ref15[1];
      _ref16 = compound2._get_base_coords(pos2, 0), ex = _ref16[0], ey = _ref16[1];
      if (alt_pos) {
        alt_pos1 = alt_pos[0], alt_pos2 = alt_pos[1];
        if ((map[x1] != null) && (map[x1][y1] != null)) {
          _ref17 = compound1._get_base_coords(alt_pos1, 3), alt_x1 = _ref17[0], alt_y1 = _ref17[1];
          if (!((map[alt_x1] != null) && (map[alt_x1][alt_y1] != null))) {
            _ref18 = compound1._get_base_coords(alt_pos1, 0), sx = _ref18[0], sy = _ref18[1];
            _ref19 = [alt_x1, alt_y1], x1 = _ref19[0], y1 = _ref19[1];
          }
        } else if (approach === RIGHT && ((map[x1] != null) && (map[x1][y8] != null))) {
          _ref20 = compound1._get_base_coords(alt_pos1, 3), alt_x1 = _ref20[0], alt_y1 = _ref20[1];
          if (!((map[alt_x1] != null) && (map[alt_x1][alt_y1] != null))) {
            _ref21 = compound1._get_base_coords(alt_pos1, 0), sx = _ref21[0], sy = _ref21[1];
            _ref22 = [alt_x1, alt_y1], x1 = _ref22[0], y1 = _ref22[1];
          }
        }
        if ((map[x8] != null) && (map[x8][y8] != null)) {
          _ref23 = compound2._get_base_coords(alt_pos2, 3), alt_x8 = _ref23[0], alt_y8 = _ref23[1];
          if (!((map[alt_x8] != null) && (map[alt_x8][alt_y8] != null))) {
            _ref24 = compound2._get_base_coords(alt_pos2, 0), ex = _ref24[0], ey = _ref24[1];
            _ref25 = [alt_x8, alt_y8], x8 = _ref25[0], y8 = _ref25[1];
          }
        } else if ((map[x8] != null) && (map[x8][y1] != null)) {
          _ref26 = compound2._get_base_coords(alt_pos2, 3), alt_x8 = _ref26[0], alt_y8 = _ref26[1];
          if (!((map[alt_x8] != null) && (map[alt_x8][alt_y8] != null))) {
            _ref27 = compound2._get_base_coords(alt_pos2, 0), ex = _ref27[0], ey = _ref27[1];
            _ref28 = [alt_x8, alt_y8], x8 = _ref28[0], y8 = _ref28[1];
          }
        }
      }
      if (approach === RIGHT) {
        r = [[sx, sy], [x1, y1], [x1, y8], [x8, y8], [ex, ey]];
        if (x8 < ex) {
          _ref29 = [ex, ey], x8 = _ref29[0], y8 = _ref29[1];
        }
        r = [[sx, sy], [x1, y1], [x1, y8], [x8, y8], [ex, ey]];
      } else if (approach === LEFT) {
        if (x8 < ex) {
          _ref30 = [ex, ey], x8 = _ref30[0], y8 = _ref30[1];
        }
        r = [[sx, sy], [x1, y1], [x8, y1], [x8, y8], [ex, ey]];
      } else if (approach === DIRECT_RIGHT) {
        r = [[sx, y8], [x1, y8], [x8, y8], [ex, y8]];
      } else if (approach === DIRECT_LEFT) {
        r = [[sx, y1], [x1, y1], [x8, y1], [ex, y1]];
      } else if (approach === DIRECT_BOTTOM) {
        r = [[x8, sy], [x8, y1], [x8, y8], [x8, ey]];
      } else if (approach === DIRECT_TOP) {
        r = [[x8, sy], [x8, y1], [x8, y8], [x8, ey]];
      }
      return r;
    };

    return Reaction;

  })();

}).call(this);
