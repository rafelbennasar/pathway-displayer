// Generated by CoffeeScript 1.4.0
(function() {
  'use strict';

  var AlignResult, Pathway, SELECTED_GROUP, iEnhancedCanvas, root,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Pathway = (function() {

    function Pathway(id, title, description, width, height) {
      this.id = id;
      this.title = title;
      this.description = description;
      this.width = width;
      this.height = height;
      console.log("[INFO] Initialised pathway " + this.id);
      this.compounds = {};
      this.reactions = {};
      this.compound_groups = {};
      this.map = {};
      this.virtual_compounds = {};
      this.map_compounds = {};
      this.virtual_compound_id = -1;
      this.virtual_reactions = {};
      this.layer = new paper.Layer();
    }

    /*
      # get_compound_instance: (compound_id) returns compound_id
      #
      # Given a compound_id, we get another compound id. If it is a positive
      # integer is a 'normal compound'; if it is a negative integer is a
      # virtual compound that is created from two or more compounds.
    */


    Pathway.prototype.get_compound_instance = function(compound_id) {
      if (this.map_compounds[compound_id] != null) {
        return this.map_compounds[compound_id];
      }
      return compound_id;
    };

    Pathway.prototype.set_map = function(compound_id) {
      var compound, h, position, w, x, x1, x2, y, y1, y2, _base, _i, _ref, _ref1, _ref2, _ref3, _results;
      compound = this.compounds[compound_id];
      position = compound["position"];
      _ref = [compound["size"][0], compound["size"][1]], w = _ref[0], h = _ref[1];
      _ref1 = [parseInt(position[0] - (w / 2)), parseInt(position[1] - (h / 2)), parseInt(position[0] + (w / 2)), parseInt(position[1] + (h / 2))], x1 = _ref1[0], y1 = _ref1[1], x2 = _ref1[2], y2 = _ref1[3];
      _results = [];
      for (x = _i = x1, _ref2 = x2 - 1; x1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; x = x1 <= _ref2 ? ++_i : --_i) {
        if ((_ref3 = (_base = this.map)[x]) == null) {
          _base[x] = {};
        }
        _results.push((function() {
          var _j, _ref4, _results1;
          _results1 = [];
          for (y = _j = y1, _ref4 = y2 - 1; y1 <= _ref4 ? _j <= _ref4 : _j >= _ref4; y = y1 <= _ref4 ? ++_j : --_j) {
            _results1.push(this.map[x][y] = compound_id);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    /*
      # get_4_neighbors_compound
      # This function returns the neighbour points for the compound group
      # generation. So, given a compound_id it returns the N, W, E, S from
      # that compound (or virtual compound).
      #
      #       N
      #   ---------
      # W |  cpd  | E
      #   ---------
      #       S
    */


    Pathway.prototype.get_compound_neighbors = function(compound_id) {
      var c, c_id, compound_list, coords, hd, sx, sy, wd, x, y, _i, _len, _ref, _ref1, _ref2;
      c_id = this.get_compound_instance(compound_id);
      c = this.compounds[c_id];
      _ref = [parseInt(c.size[0] / 2), parseInt(c.size[1] / 2)], wd = _ref[0], hd = _ref[1];
      _ref1 = [parseInt(c.position[0]), parseInt(c.position[1])], x = _ref1[0], y = _ref1[1];
      compound_list = [];
      coords = [[x - wd - 1, y], [x + wd, y], [x, y - hd - 1], [x, y - hd - 2], [x, y + hd], [x - wd - 1, y - hd - 1], [x + wd + 1, y - hd - 1]];
      for (_i = 0, _len = coords.length; _i < _len; _i++) {
        _ref2 = coords[_i], sx = _ref2[0], sy = _ref2[1];
        if (this.is_busy_coords(sx, sy)) {
          compound_list.push(this.get_compound_coords(sx, sy));
        }
      }
      return compound_list;
    };

    Pathway.prototype.is_busy = function(point) {
      var x, y, _ref;
      _ref = [point[0], point[1]], x = _ref[0], y = _ref[1];
      return (this.map[x] != null) && (this.map[x][y] != null);
    };

    Pathway.prototype.is_busy_coords = function(x, y) {
      return (this.map[x] != null) && (this.map[x][y] != null);
    };

    Pathway.prototype.get_compound = function(point) {
      var x, y, _ref;
      _ref = [point[0], point[1]], x = _ref[0], y = _ref[1];
      if ((this.map[x] != null) && (this.map[x][y] != null)) {
        return this.map[x][y];
      }
    };

    Pathway.prototype.get_compound_coords = function(x, y) {
      if ((this.map[x] != null) && (this.map[x][y] != null)) {
        return this.map[x][y];
      }
    };

    Pathway.prototype.build_virtual_compounds = function() {
      " In order to build the virtual compounds in two steps:\n1. build the virtual compounds groups. Which groups we have.\n2. Later, we\n";

      var c_group, c_id, cmp, cmp_id, compound_id, inf, max, max_x, max_y, min, min_x, min_y, new_compound, opened, p, pending, position, s, size, visited, x, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;
      pending = Object.keys(this.compounds);
      c_group = {};
      visited = [];
      while (pending.length > 0) {
        compound_id = pending.pop();
        opened = [compound_id];
        visited.push(compound_id);
        c_group[compound_id] = [compound_id];
        while (opened.length > 0) {
          c_id = opened.pop();
          _ref = this.get_compound_neighbors(c_id);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            new_compound = _ref[_i];
            if (__indexOf.call(visited, new_compound) < 0) {
              visited.push(new_compound);
              opened.push(new_compound);
              c_group[compound_id].push(new_compound);
            }
          }
        }
        pending = (function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = pending.length; _j < _len1; _j++) {
            x = pending[_j];
            if (visited.indexOf(x) === -1) {
              _results.push(x);
            }
          }
          return _results;
        })();
      }
      _ref1 = [Math.min, Math.max, 32768], min = _ref1[0], max = _ref1[1], inf = _ref1[2];
      _results = [];
      for (compound_id in c_group) {
        if (c_group[compound_id].length > 1) {
          this.virtual_compound_id -= 1;
          this.virtual_compounds[this.virtual_compound_id] = c_group[compound_id];
          _ref2 = [inf, inf, -inf, -inf], min_x = _ref2[0], min_y = _ref2[1], max_x = _ref2[2], max_y = _ref2[3];
          _ref3 = c_group[compound_id];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            cmp_id = _ref3[_j];
            cmp = this.compounds[cmp_id];
            this.compounds[cmp_id].virtual_compound_id = this.virtual_compound_id;
            _ref4 = [cmp.position, cmp.size], p = _ref4[0], s = _ref4[1];
            _ref5 = [parseInt(min(min_x, p[0] - s[0] / 2)), parseInt(min(min_y, p[1] - s[1] / 2))], min_x = _ref5[0], min_y = _ref5[1];
            _ref6 = [parseInt(max(max_x, p[0] + s[0] / 2)), parseInt(max(max_y, p[1] + s[1] / 2))], max_x = _ref6[0], max_y = _ref6[1];
          }
          size = [get_m2c_point(max_x - min_x), get_m2c_point(max_y - min_y)];
          position = [get_m2c_point(max_x) - size[0] / 2, get_m2c_point(max_y) - size[1] / 2];
          _results.push(this._add_compound(compound_id = this.virtual_compound_id, "Virtual cmp " + this.virtual_compound_id, "Virtual cmp", position, size, "square", ["red", "blue"]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Pathway.prototype._add_compound = function(compound_id, label, description, position, size, shape, color, virtual) {
      var id, m_size_x, m_size_y, path;
      if (virtual == null) {
        virtual = false;
      }
      try {
        this.compounds[compound_id] = new Compound(id = compound_id, label = label, description = description, position = [get_c2m_point(position[0]), get_c2m_point(position[1])], size = [get_c2m_point(size[0]), get_c2m_point(size[1])], shape = shape, color = color, path = this.path, virtual = virtual);
        m_size_x = get_m2c_point(position[0] + size[0]);
        if (!(this.max_size_x != null) || m_size_x > this.max_size_x) {
          this.max_size_x = m_size_x;
        }
        m_size_y = get_m2c_point(position[1] + size[1]);
        if (!(this.max_size_y != null) || m_size_y > this.max_size_y) {
          return this.max_size_y = m_size_y;
        }
      } catch (error) {
        console.log("[ERROR] Trying to add compoound id:", compound_id);
        return console.log(error);
      }
    };

    Pathway.prototype.add_compound_list = function(compound_list) {
      var c, _i, _len;
      for (_i = 0, _len = compound_list.length; _i < _len; _i++) {
        c = compound_list[_i];
        this._add_compound(c.id, c.label, c.description, c.position, c.size, c.shape, c.color);
        this.set_map(c.id);
      }
      this.build_virtual_compounds();
      return console.log("all compounds added... max size was", this.max_size_x, this.max_size_y);
    };

    Pathway.prototype.set_pathway_offsets = function(x, y) {
      this.layer.translate(x, y);
      return this.layer.activate();
    };

    Pathway.prototype._add_reaction = function(id, label, compound1_id, compound2_id, type) {
      var compound1, compound2, cpd1_v, cpd2_v, r, _i, _len, _ref, _ref1, _results;
      compound1 = this.compounds[compound1_id];
      compound2 = this.compounds[compound2_id];
      if (this.reactions[id] != null) {
        this.reactions[id].push(new Reaction(id, label, compound1, compound2, type));
      } else {
        this.reactions[id] = [new Reaction(id, label, compound1, compound2, type)];
      }
      if (compound1.virtual_compound_id != null) {
        cpd1_v = compound1.virtual_compound_id;
      } else {
        cpd1_v = compound1.id;
      }
      if (compound2.virtual_compound_id != null) {
        cpd2_v = compound2.virtual_compound_id;
      } else {
        cpd2_v = compound2.id;
      }
      if (cpd1_v > cpd2_v) {
        _ref = [cpd2_v, cpd1_v], cpd1_v = _ref[0], cpd2_v = _ref[1];
      }
      if (this.virtual_reactions[[cpd1_v, cpd2_v]] != null) {
        if (__indexOf.call(this.virtual_reactions[[cpd1_v, cpd2_v]]['type'], type) < 0) {
          this.virtual_reactions[[cpd1_v, cpd2_v]]['type'].push(type);
          this.virtual_reactions[[cpd1_v, cpd2_v]]['reaction'].push(id);
        }
      } else {
        this.virtual_reactions[[cpd1_v, cpd2_v]] = {
          'type': [type],
          'reaction': [id]
        };
      }
      _ref1 = this.reactions[id];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        r = _ref1[_i];
        _results.push(r.append_virtual_reaction([cpd1_v, cpd2_v]));
      }
      return _results;
    };

    Pathway.prototype.add_reaction_list = function(reaction_list) {
      var r, _i, _len;
      for (_i = 0, _len = reaction_list.length; _i < _len; _i++) {
        r = reaction_list[_i];
        this._add_reaction(r.id, r.label, r.compound1_id, r.compound2_id, r.type);
      }
      paper.view.draw();
      return this.draw_reactions();
    };

    Pathway.prototype.draw_reactions = function() {
      var cpd1, cpd2, p, p1, p2, paper_path, r, r_id, reaction_path, s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      for (r in this.virtual_reactions) {
        _ref = [r.split(",")[0], r.split(",")[1]], cpd1 = _ref[0], cpd2 = _ref[1];
        try {
          _ref1 = [this.compounds[cpd1].position, this.compounds[cpd2].position], p1 = _ref1[0], p2 = _ref1[1];
          reaction_path = Reaction.get_coords(this.compounds[cpd1], this.compounds[cpd2], this.map);
          paper_path = new paper.Path();
          paper_path.strokeColor = 'black';
          _ref2 = this.virtual_reactions[r]["reaction"];
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            r_id = _ref2[_i];
            _ref3 = this.reactions[r_id];
            for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
              s = _ref3[_j];
              s.append_path(paper_path);
            }
          }
          for (_k = 0, _len2 = reaction_path.length; _k < _len2; _k++) {
            p = reaction_path[_k];
            paper_path.add(new paper.Point(p[0] * 4, p[1] * 4));
          }
        } catch (error) {
          console.log("--- oops", error);
          console.log("cpd1", cpd1, "cpd2", cpd2, "::");
          console.log("r", r);
        }
      }
      return paper.view.draw();
    };

    return Pathway;

  })();

  SELECTED_GROUP = null;

  AlignResult = (function() {

    function AlignResult(id, r_align, reaction1, reaction2) {
      var color1, color2, r3, r4, style_aligned, style_highlighted, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1,
        _this = this;
      this.id = id;
      color1 = r_align["color1"];
      color2 = r_align["color2"];
      this.g1 = new paper.Group();
      this.g2 = new paper.Group();
      try {
        for (_i = 0, _len = reaction1.length; _i < _len; _i++) {
          r3 = reaction1[_i];
          _ref = r3["paths"];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            r4 = _ref[_j];
            this.g1.addChild(r4);
          }
        }
        for (_k = 0, _len2 = reaction2.length; _k < _len2; _k++) {
          r3 = reaction2[_k];
          _ref1 = r3["paths"];
          for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
            r4 = _ref1[_l];
            this.g2.addChild(r4);
          }
        }
      } catch (e) {
        console.log("error adding groups");
        console.log(e);
      }
      style_aligned = {
        opacity: 1,
        strokeColor: color1,
        strokeWidth: 3,
        closed: false
      };
      style_highlighted = {
        opacity: 1,
        strokeColor: color2,
        strokeWidth: 3,
        closed: false
      };
      this.g1.style = style_aligned;
      this.g2.style = style_aligned;
      this.g1.onMouseEnter = function(event) {
        if (SELECTED_GROUP != null) {
          SELECTED_GROUP[0].style = style_aligned;
          SELECTED_GROUP[1].style = style_aligned;
        }
        SELECTED_GROUP = [_this.g1, _this.g2];
        _this.g1.bringToFront();
        _this.g2.bringToFront();
        _this.g1.style = style_highlighted;
        return _this.g2.style = style_highlighted;
      };
      this.g2.onMouseEnter = function(event) {
        if (SELECTED_GROUP != null) {
          SELECTED_GROUP[0].style = style_aligned;
          SELECTED_GROUP[1].style = style_aligned;
        }
        SELECTED_GROUP = [_this.g1, _this.g2];
        _this.g1.bringToFront();
        _this.g2.bringToFront();
        _this.g1.style = style_highlighted;
        return _this.g2.style = style_highlighted;
      };
    }

    return AlignResult;

  })();

  iEnhancedCanvas = (function() {

    function iEnhancedCanvas(canvas_id) {
      this.canvas_id = canvas_id;
      this.compounds = {};
      this.pathway_list = [];
      this.canvas = document.getElementById(this.canvas_id);
      paper.setup(this.canvas);
      this.paper_view = paper.view;
    }

    iEnhancedCanvas.prototype.setup = function() {
      var h, total_size_x, total_size_y, w, width, z, z1, z2, _ref, _ref1;
      width = paper.view.size.width / this.pathway_list.length;
      _ref = [$(document).width(), $(document).height()], w = _ref[0], h = _ref[1];
      console.log(paper.view.size.width);
      _ref1 = [0, 0], total_size_x = _ref1[0], total_size_y = _ref1[1];
      this.pathway_list.forEach(function(pathway, e) {
        total_size_x += pathway.max_size_x;
        return total_size_y = Math.max(total_size_y, pathway.max_size_y);
      });
      z1 = $(document).width() / total_size_x;
      z2 = $(document).height() / total_size_y;
      z = Math.min(z1, z2);
      console.log("Size", w, h);
      console.log("Z", z, z1, z2);
      console.log(total_size_x, $(document).width());
      console.log(total_size_y, $(document).height());
      if (z < 1) {
        paper.view.zoom = z;
        paper.view.center = [total_size_x / 2, total_size_y / 2];
      }
      width = paper.view.size.width / this.pathway_list.length;
      return this.pathway_list.forEach(function(pathway, e) {
        pathway.set_pathway_offsets(e * width, 0);
        return paper.view.draw();
      });
    };

    iEnhancedCanvas.prototype.list_pathways = function() {
      return console.log('Pathways' + pathway_list);
    };

    iEnhancedCanvas.prototype.new_pathway = function(id, title, description, width, height, canvas_id) {
      var pathway;
      console.log("[INFO] Adding pathway " + id + " (" + width + ", " + height + ")");
      console.log("       Title: " + title);
      console.log("       Description: " + description);
      pathway = new Pathway(id, canvas_id, title, description, width, height);
      this.pathway_list.push(pathway);
      return pathway;
    };

    iEnhancedCanvas.prototype.add_result = function(result_list) {
      var align_id, r_align, reaction1, reaction2, result_group, _i, _len;
      result_group = {};
      for (_i = 0, _len = result_list.length; _i < _len; _i++) {
        r_align = result_list[_i];
        align_id = r_align["id"];
        reaction1 = this.pathway_list[r_align['pathway1_id']]["reactions"][r_align["reaction1_id"]];
        reaction2 = this.pathway_list[r_align['pathway2_id']]["reactions"][r_align["reaction2_id"]];
        result_group[align_id] = new AlignResult(align_id, r_align, reaction1, reaction2);
      }
      return paper.view.draw();
    };

    return iEnhancedCanvas;

  })();

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (!root.iEnhancedCanvas) {
    root.iEnhancedCanvas = iEnhancedCanvas;
  }

}).call(this);
